/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
        private Map<Integer, Integer> heights = new HashMap<>(); 
    private Map<Integer, Integer> depths = new HashMap<>(); 
    private Map<Integer, List<Integer>> depthHeights = new HashMap<>();
    public int[] treeQueries(TreeNode root, int[] queries) {
        calculateHeightAndDepth(root, 0);

        for (Map.Entry<Integer, Integer> entry : heights.entrySet()) {
            int nodeValue = entry.getKey();
            int height = entry.getValue();
            int depth = depths.get(nodeValue);
            depthHeights.computeIfAbsent(depth, k -> new ArrayList<>()).add(height);
        }
        for (List<Integer> heightList : depthHeights.values()) {
            Collections.sort(heightList, Collections.reverseOrder());
        }

        int[] result = new int[queries.length];
        
        for (int i = 0; i < queries.length; i++) {
            int nodeValue = queries[i];
            int depth = depths.get(nodeValue);
            int nodeHeight = heights.get(nodeValue);
            List<Integer> heightList = depthHeights.get(depth);
            
            int maxHeightWithoutNode;
            if (heightList.size() == 1) {
                maxHeightWithoutNode = depth - 1;
            } else if (heightList.get(0) == nodeHeight) {
                maxHeightWithoutNode = depth + heightList.get(1);
            } else {
                maxHeightWithoutNode = depth + heightList.get(0);
            }

            result[i] = maxHeightWithoutNode;
        }

        return result;
    }

    private int calculateHeightAndDepth(TreeNode node, int depth) {
        if (node == null) return -1;

        depths.put(node.val, depth);
        int leftHeight = calculateHeightAndDepth(node.left, depth + 1);
        int rightHeight = calculateHeightAndDepth(node.right, depth + 1);

        int height = 1 + Math.max(leftHeight, rightHeight);
        heights.put(node.val, height);

        return height;
    }
}
