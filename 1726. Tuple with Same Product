class Solution {
    public int tupleSameProduct(int[] nums) {
        Arrays.sort(nums);
        int count=0;
        for(int i=0;i<nums.length-1;i++){
            for(int j=nums.length-1;j>i;j--){
                Set<Integer> set=new HashSet<>();
                for(int k=i+1;k<j;k++){
                    if((nums[i]*nums[j])%nums[k]==0){
                        if(set.contains((nums[i]*nums[j])/nums[k])){
                            count++;
                        }
                        set.add(nums[k]);
                    }
                }
            }
        }
        return count*8;
    }
}

                    OOOOOOOOOOOOORRRRRRRRRRRRRRRR

class Solution {
    public int tupleSameProduct(int[] nums) {
        Map<Integer,Integer> map=new HashMap<>();
        int count=0;
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                count+=map.getOrDefault(nums[i]*nums[j],0);
                map.put(nums[i]*nums[j],map.getOrDefault(nums[i]*nums[j],0)+1);
            }
        }
        return count*8;
    }
}
