class Solution {
    final double EPS = 1e-6;
    public boolean judgePoint24(int[] cards) {
        List<Double> list=new ArrayList<>();
        for(int card:cards){
            list.add((double)(card));
        }
        return depthFirstSearch(list);
    }
    private boolean depthFirstSearch(List<Double> list){
        if(list.size()==1){
            return Math.abs(list.get(0)-24.0)<EPS;
        }
        for(int i=0;i<list.size();i++){
            for(int j=0;j<list.size();j++){
                if(i==j){
                    continue;
                }
                List<Double> pos=new ArrayList<>();
                for(int k=0;k<list.size();k++){
                    if(k!=i && k!=j){
                        pos.add(list.get(k));
                    }
                }
                for(double val:compute(list.get(i),list.get(j))){
                     pos.add(val);
                     if(depthFirstSearch(pos)){
                        return true;
                     }   
                     pos.remove(pos.size()-1);
                }
            }
        }
        return false;
    }
    private List<Double> compute(double a, double b) {
        List<Double> res = new ArrayList<>();
        res.add(a + b);
        res.add(a - b);
        res.add(b - a);
        res.add(a * b);
        if (Math.abs(b) > EPS) res.add(a / b);
        if (Math.abs(a) > EPS) res.add(b / a);
        return res;
    }
}
