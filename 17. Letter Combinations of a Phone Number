class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        if (digits == null || digits.length() == 0) return result;
        Map<Character, String> d = new HashMap<>();
        d.put('2', "abc");
         d.put('3', "def");
         d.put('4', "ghi");
        d.put('5', "jkl");
         d.put('6', "mno"); 
         d.put('7', "pqrs");
        d.put('8', "tuv");
         d.put('9', "wxyz");
        backtrack(digits, 0, new StringBuilder(), d, result);
        return result;
    }
    private void backtrack(String digits, int i, StringBuilder curr, Map<Character, String> d, List<String> result) {
        if (i == digits.length()) {
             result.add(curr.toString()); return;
              }
        char digit = digits.charAt(i);
        String letters = d.get(digit);
        for (char letter : letters.toCharArray()) {
            curr.append(letter);
            backtrack(digits, i + 1, curr, d, result);
            curr.deleteCharAt(curr.length() - 1);
        }
    }
}
