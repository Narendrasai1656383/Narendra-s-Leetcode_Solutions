/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public String getDirections(TreeNode root, int startValue, int destValue) {
        StringBuilder a=new StringBuilder();
        StringBuilder b=new StringBuilder();
        find(root,startValue,a);
        find(root,destValue,b);
        int i=0,maxl=Math.min(a.length(),b.length());
        while(i<maxl && a.charAt(a.length()-i-1)==b.charAt(b.length()-i-1)){
            ++i;
        }
        return "U".repeat(a.length()-i)+b.reverse().toString().substring(i);
    }
    private boolean find(TreeNode root,int val,StringBuilder sb){
        if(root.val==val){
            return true;
        }
        if(root.left!=null && find(root.left,val,sb)){
            sb.append("L");
        }
        else if(root.right!=null && find(root.right,val,sb)){
            sb.append("R");
        }
        return sb.length()>0;
    }
}
