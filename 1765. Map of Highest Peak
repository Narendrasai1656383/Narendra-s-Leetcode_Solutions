class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int[] rowChange=new int[]{0,0,-1,1};
        int[] colChange=new int[]{-1,1,0,0};
        Queue<int[]> que=new ArrayDeque<>();
        for(int i=0;i<isWater.length;i++){
            for(int j=0;j<isWater[0].length;j++){
                if(isWater[i][j]==1){
                    que.add(new int[]{i,j});
                }
                isWater[i][j]-=1;
            }
        }
        while(!que.isEmpty()){
            int[] arr=que.poll();
            for(int i=0;i<4;i++){
                int newRow=arr[0]+rowChange[i];
                int newCol=arr[1]+colChange[i];
                if(newRow>=0 && newRow<isWater.length && newCol>=0 && newCol<isWater[0].length && isWater[newRow][newCol]==-1){
                    isWater[newRow][newCol]=isWater[arr[0]][arr[1]]+1;
                    que.offer(new int[]{newRow,newCol});
                }
            }
        }
        return isWater;
    }
}
