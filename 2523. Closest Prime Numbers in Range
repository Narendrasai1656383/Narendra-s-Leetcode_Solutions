class Solution {
    public int[] closestPrimes(int left, int right) {
        List<Integer> primeNum=new ArrayList<Integer>();
        for(int i=left;i<=right;i++){
            if(isPrime(i)){
                primeNum.add(i);
            }
            if(primeNum.size()>=2){
                if((primeNum.get(primeNum.size()-1)-primeNum.get(primeNum.size()-2))<=2){
                    return new int[]{primeNum.get(primeNum.size()-2),primeNum.get(primeNum.size()-1)};
                }
            }
        }
        int minDiff=Integer.MAX_VALUE;
        int[] pair=new int[]{-1,-1};
        for(int i=0;i<primeNum.size()-1;i++){
            if((primeNum.get(i+1)-primeNum.get(i))<minDiff){
                minDiff=primeNum.get(i+1)-primeNum.get(i);
                pair[0]=primeNum.get(i);
                pair[1]=primeNum.get(i+1);
            }
            if(minDiff<=2){
                break;
            }
        }
        return pair;
    }
    private boolean isPrime(int num){
        if(num==1){
            return false;
        }
        if(num==2){
            return true;
        }
        for(int i=2;i<=Math.sqrt(num);i++){
            if(num%i==0){
                return false;
            }
        }
        return true;
    }
}
