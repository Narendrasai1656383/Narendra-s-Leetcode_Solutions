class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> l=new ArrayList<>();
        boolean[] safe=new boolean[graph.length];
        for(int i=0;i<graph.length;i++){
            safe[i]=(graph[i].length==0);
        }
        for(int i=graph.length-1;i>=0;i--){
            boolean safeNode=true;
            for(int j=0;j<graph[i].length;j++){
                if(!safe[graph[i][j]]){
                    boolean[] isVisited=new boolean[graph.length];
                    safeNode=(safeNode && isSafeNode(graph,safe,graph[i][j],isVisited));    
                }
            }
            if(safeNode){
                safe[i]=true;
                l.addFirst(i);
            }
        }
        return l;
    }
    private boolean isSafeNode(int[][] graph,boolean[] safe,int num,boolean[] isVisited){
        if(graph[num].length==0 || graph[num]==null || safe[num]){
            return true;
        }
        if(isVisited[num]){
            return safe[num];
        }
        isVisited[num]=true;
        boolean safeNode=true;
        for(int i=0;i<graph[num].length;i++){
            safeNode=(safeNode && isSafeNode(graph,safe,graph[num][i],isVisited));
        }
        if(safeNode){
            safe[num]=true;
        }
        return safeNode;
    }
}
