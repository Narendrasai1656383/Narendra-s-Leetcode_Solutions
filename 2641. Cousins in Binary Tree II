/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode replaceValueInTree(TreeNode root) {
        if(root==null){
            return null;
        }
        Map<Integer,Integer> map=new HashMap<>();
        dfs(root,0,map);
        root.val=0;
        TreeNode temp=root;
        int val=getVal(root.left)+getVal(root.right);
        dfsCousin(val,root.left,map,1);
        dfsCousin(val,root.right,map,1);
        return root;
    }
    private void dfs(TreeNode root,int level,Map<Integer,Integer> map){
        if(root==null){
            return;
        }
        map.put(level,map.getOrDefault(level,0)+root.val);
        dfs(root.left,level+1,map);
        dfs(root.right,level+1,map);
    }
    private void dfsCousin(int val,TreeNode node,Map<Integer,Integer> map,int level){
        if(node==null){
            return;
        }
        node.val=map.get(level)-val;
        val=getVal(node.left)+getVal(node.right);
        dfsCousin(val,node.left,map,level+1);
        dfsCousin(val,node.right,map,level+1);
    }
    private int getVal(TreeNode root){
        return root==null?0:root.val;
    }
}
