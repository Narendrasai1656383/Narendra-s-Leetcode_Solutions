class Solution {
    public int countSubIslands(int[][] grid1, int[][] grid2) {
        boolean[][] vis=new boolean[grid2.length][grid2[0].length];
        int count=0;
        for(int i=0;i<grid2.length;i++){
            for(int j=0;j<grid2[0].length;j++){
                if(grid2[i][j]==1 && grid1[i][j]==1 && vis[i][j]==false){
                    if(dfs(grid1,grid2,i,j,vis)){
                        count++;
                    }
                }
            }
        }
        return count;
    }
    public boolean dfs(int[][] grid1,int[][] grid2,int i,int j,boolean[][] vis){
        if(i<0 || j<0 || i>=grid2.length || j>=grid2[0].length || grid2[i][j]==0 || vis[i][j]==true){
            return true;
        }
        if(grid1[i][j]==0){
            return false;
        }
        vis[i][j]=true;
        boolean isSubIsland=true;
        isSubIsland &=dfs(grid1,grid2,i+1,j,vis);
        isSubIsland &=dfs(grid1,grid2,i,j+1,vis);
        isSubIsland &=dfs(grid1,grid2,i-1,j,vis);
        isSubIsland &=dfs(grid1,grid2,i,j-1,vis);
        return isSubIsland;
    }
}
